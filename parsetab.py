
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progAND BOOLDCL BOOLVAL DIVIDE ELIF ELSE EQ FLOATDCL FNUMBER FOR GE GT IF INTDCL INUMBER LE LPAREN LT MINUS NAME NE OR PLUS POW PRINT RPAREN TIMES WHILEprog : stmtsstmts : statement stmts\n            | statement statement : INTDCL NAME ";"\n                | INTDCL NAME "=" expression ";" statement : FLOATDCL NAME ";"\n                | FLOATDCL NAME "=" expression ";" statement : BOOLDCL NAME ";"\n                | BOOLDCL NAME "=" boolean_expression ";" statement : PRINT expression ";"statement : IF LPAREN boolean_expression RPAREN "{" stmts "}" elifs else elifs : elif elifs\n            | elif elif : ELIF LPAREN boolean_expression RPAREN "{" stmts "}"\n            | empty else : ELSE "{" stmts "}"\n            | empty statement : WHILE LPAREN boolean_expression RPAREN "{" stmts "}" statement : FOR LPAREN statement boolean_expression ";" step RPAREN "{" stmts "}"step : NAME PLUS "=" expression\n            | NAME MINUS "=" expression\n            | NAME TIMES "=" expression\n            | NAME DIVIDE "=" expression\n            | NAME PLUS PLUS\n            | NAME MINUS MINUSstatement : NAME "=" expression ";"expression : LPAREN expression RPARENexpression : expression PLUS expression\n                | expression MINUS expression\n                | expression TIMES expression\n                | expression DIVIDE expression\n                | expression POW expression expression : INUMBERexpression : FNUMBERexpression : boolean_expressionboolean_expression : LPAREN boolean_expression RPARENboolean_expression : boolean_expression AND boolean_expression\n                        | boolean_expression OR boolean_expression\n                        | comparison\n                        | boolean_val comparison : expression EQ expression\n                | expression NE expression\n                | expression LT expression\n                | expression LE expression\n                | expression GT expression\n                | expression GE expression boolean_val : boolexp\n                    | NAME boolexp : BOOLVALexpression : NAMEempty :'
    
_lr_action_items = {'INTDCL':([0,3,29,30,33,35,37,60,82,83,84,85,86,92,93,99,100,102,103,110,112,113,120,122,125,126,128,],[4,4,4,-4,-6,-8,-10,-26,-5,-7,-9,4,4,-51,-18,-51,-13,-15,4,-11,-17,-12,4,-19,-16,4,-14,]),'FLOATDCL':([0,3,29,30,33,35,37,60,82,83,84,85,86,92,93,99,100,102,103,110,112,113,120,122,125,126,128,],[6,6,6,-4,-6,-8,-10,-26,-5,-7,-9,6,6,-51,-18,-51,-13,-15,6,-11,-17,-12,6,-19,-16,6,-14,]),'BOOLDCL':([0,3,29,30,33,35,37,60,82,83,84,85,86,92,93,99,100,102,103,110,112,113,120,122,125,126,128,],[7,7,7,-4,-6,-8,-10,-26,-5,-7,-9,7,7,-51,-18,-51,-13,-15,7,-11,-17,-12,7,-19,-16,7,-14,]),'PRINT':([0,3,29,30,33,35,37,60,82,83,84,85,86,92,93,99,100,102,103,110,112,113,120,122,125,126,128,],[8,8,8,-4,-6,-8,-10,-26,-5,-7,-9,8,8,-51,-18,-51,-13,-15,8,-11,-17,-12,8,-19,-16,8,-14,]),'IF':([0,3,29,30,33,35,37,60,82,83,84,85,86,92,93,99,100,102,103,110,112,113,120,122,125,126,128,],[9,9,9,-4,-6,-8,-10,-26,-5,-7,-9,9,9,-51,-18,-51,-13,-15,9,-11,-17,-12,9,-19,-16,9,-14,]),'WHILE':([0,3,29,30,33,35,37,60,82,83,84,85,86,92,93,99,100,102,103,110,112,113,120,122,125,126,128,],[10,10,10,-4,-6,-8,-10,-26,-5,-7,-9,10,10,-51,-18,-51,-13,-15,10,-11,-17,-12,10,-19,-16,10,-14,]),'FOR':([0,3,29,30,33,35,37,60,82,83,84,85,86,92,93,99,100,102,103,110,112,113,120,122,125,126,128,],[11,11,11,-4,-6,-8,-10,-26,-5,-7,-9,11,11,-51,-18,-51,-13,-15,11,-11,-17,-12,11,-19,-16,11,-14,]),'NAME':([0,3,4,6,7,8,14,18,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,58,60,82,83,84,85,86,87,92,93,99,100,102,103,105,107,108,109,110,112,113,114,120,122,125,126,128,],[5,5,13,15,16,22,22,22,56,56,5,-4,22,-6,22,-8,56,-10,22,22,22,22,22,22,22,22,22,22,22,56,56,22,56,-26,-5,-7,-9,5,5,91,-51,-18,-51,-13,-15,5,22,22,22,22,-11,-17,-12,56,5,-19,-16,5,-14,]),'$end':([1,2,3,12,30,33,35,37,60,82,83,84,92,93,99,100,102,110,112,113,122,125,128,],[0,-1,-3,-2,-4,-6,-8,-10,-26,-5,-7,-9,-51,-18,-51,-13,-15,-11,-17,-12,-19,-16,-14,]),'}':([3,12,30,33,35,37,60,82,83,84,88,89,92,93,99,100,102,110,112,113,115,122,123,125,127,128,],[-3,-2,-4,-6,-8,-10,-26,-5,-7,-9,92,93,-51,-18,-51,-13,-15,-11,-17,-12,122,-19,125,-16,128,-14,]),'=':([5,13,15,16,95,96,97,98,],[14,31,34,36,105,107,108,109,]),'LPAREN':([8,9,10,11,14,18,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,58,60,82,83,84,92,93,99,100,101,102,105,107,108,109,110,112,113,114,122,125,128,],[18,27,28,29,18,18,53,53,-4,18,-6,18,-8,53,-10,18,18,18,18,18,18,18,18,18,18,18,53,53,53,53,-26,-5,-7,-9,-51,-18,-51,-13,114,-15,18,18,18,18,-11,-17,-12,53,-19,-16,-14,]),'INUMBER':([8,14,18,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,58,60,82,83,84,92,93,99,100,102,105,107,108,109,110,112,113,114,122,125,128,],[19,19,19,19,19,-4,19,-6,19,-8,19,-10,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-26,-5,-7,-9,-51,-18,-51,-13,-15,19,19,19,19,-11,-17,-12,19,-19,-16,-14,]),'FNUMBER':([8,14,18,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,58,60,82,83,84,92,93,99,100,102,105,107,108,109,110,112,113,114,122,125,128,],[20,20,20,20,20,-4,20,-6,20,-8,20,-10,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-26,-5,-7,-9,-51,-18,-51,-13,-15,20,20,20,20,-11,-17,-12,20,-19,-16,-14,]),'BOOLVAL':([8,14,18,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,58,60,82,83,84,92,93,99,100,102,105,107,108,109,110,112,113,114,122,125,128,],[26,26,26,26,26,-4,26,-6,26,-8,26,-10,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-26,-5,-7,-9,-51,-18,-51,-13,-15,26,26,26,26,-11,-17,-12,26,-19,-16,-14,]),';':([13,15,16,17,19,20,21,22,23,24,25,26,32,56,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,],[30,33,35,37,-33,-34,-35,-48,-39,-40,-47,-49,60,-48,82,83,84,-28,-29,-30,-31,-32,-41,-42,-43,-44,-45,-46,-27,-36,-37,-38,87,]),'PLUS':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,91,95,116,117,118,119,121,],[38,-33,-34,-35,-48,-39,-40,-47,-49,38,38,-35,-35,38,-48,-35,38,38,-35,38,38,38,38,38,38,38,38,38,38,38,-27,-36,-35,-35,-35,-35,95,104,38,38,38,38,-35,]),'MINUS':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,91,96,116,117,118,119,121,],[39,-33,-34,-35,-48,-39,-40,-47,-49,39,39,-35,-35,39,-48,-35,39,39,-35,39,39,39,39,39,39,39,39,39,39,39,-27,-36,-35,-35,-35,-35,96,106,39,39,39,39,-35,]),'TIMES':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,91,116,117,118,119,121,],[40,-33,-34,-35,-48,-39,-40,-47,-49,40,40,-35,-35,40,-48,-35,40,40,-35,40,40,40,40,40,40,40,40,40,40,40,-27,-36,-35,-35,-35,-35,97,40,40,40,40,-35,]),'DIVIDE':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,91,116,117,118,119,121,],[41,-33,-34,-35,-48,-39,-40,-47,-49,41,41,-35,-35,41,-48,-35,41,41,-35,41,41,41,41,41,41,41,41,41,41,41,-27,-36,-35,-35,-35,-35,98,41,41,41,41,-35,]),'POW':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,116,117,118,119,121,],[42,-33,-34,-35,-48,-39,-40,-47,-49,42,42,-35,-35,42,-48,-35,42,42,-35,42,42,42,42,42,42,42,42,42,42,42,-27,-36,-35,-35,-35,-35,42,42,42,42,-35,]),'EQ':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,116,117,118,119,121,],[43,-33,-34,-35,-48,-39,-40,-47,-49,43,43,-35,-35,43,-48,-35,43,43,-35,43,43,43,43,43,43,43,43,43,43,43,-27,-36,-35,-35,-35,-35,43,43,43,43,-35,]),'NE':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,116,117,118,119,121,],[44,-33,-34,-35,-48,-39,-40,-47,-49,44,44,-35,-35,44,-48,-35,44,44,-35,44,44,44,44,44,44,44,44,44,44,44,-27,-36,-35,-35,-35,-35,44,44,44,44,-35,]),'LT':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,116,117,118,119,121,],[45,-33,-34,-35,-48,-39,-40,-47,-49,45,45,-35,-35,45,-48,-35,45,45,-35,45,45,45,45,45,45,45,45,45,45,45,-27,-36,-35,-35,-35,-35,45,45,45,45,-35,]),'LE':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,116,117,118,119,121,],[46,-33,-34,-35,-48,-39,-40,-47,-49,46,46,-35,-35,46,-48,-35,46,46,-35,46,46,46,46,46,46,46,46,46,46,46,-27,-36,-35,-35,-35,-35,46,46,46,46,-35,]),'GT':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,116,117,118,119,121,],[47,-33,-34,-35,-48,-39,-40,-47,-49,47,47,-35,-35,47,-48,-35,47,47,-35,47,47,47,47,47,47,47,47,47,47,47,-27,-36,-35,-35,-35,-35,47,47,47,47,-35,]),'GE':([17,19,20,21,22,23,24,25,26,32,49,50,54,55,56,57,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,116,117,118,119,121,],[48,-33,-34,-35,-48,-39,-40,-47,-49,48,48,-35,-35,48,-48,-35,48,48,-35,48,48,48,48,48,48,48,48,48,48,48,-27,-36,-35,-35,-35,-35,48,48,48,48,-35,]),'RPAREN':([19,20,21,22,23,24,25,26,49,50,54,56,57,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,90,104,106,116,117,118,119,121,],[-33,-34,-35,-48,-39,-40,-47,-49,74,75,79,-48,80,-28,-29,-30,-31,-32,-41,-42,-43,-44,-45,-46,-27,-36,-37,-38,75,94,-24,-25,-20,-21,-22,-23,124,]),'AND':([19,20,21,22,23,24,25,26,50,54,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,121,],[-33,-34,51,-48,-39,-40,-47,-49,51,51,-48,51,51,-28,-29,-30,-31,-32,-41,-42,-43,-44,-45,-46,-27,-36,51,51,51,51,51,]),'OR':([19,20,21,22,23,24,25,26,50,54,56,57,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,81,121,],[-33,-34,52,-48,-39,-40,-47,-49,52,52,-48,52,52,-28,-29,-30,-31,-32,-41,-42,-43,-44,-45,-46,-27,-36,52,52,52,52,52,]),'{':([79,80,94,111,124,],[85,86,103,120,126,]),'ELIF':([92,100,102,128,],[101,101,-15,-14,]),'ELSE':([92,99,100,102,113,128,],[-51,111,-13,-15,-12,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'stmts':([0,3,85,86,103,120,126,],[2,12,88,89,115,123,127,]),'statement':([0,3,29,85,86,103,120,126,],[3,3,58,3,3,3,3,3,]),'expression':([8,14,18,27,28,31,34,36,38,39,40,41,42,43,44,45,46,47,48,51,52,53,58,105,107,108,109,114,],[17,32,49,55,55,59,61,55,63,64,65,66,67,68,69,70,71,72,73,55,55,49,55,116,117,118,119,55,]),'boolean_expression':([8,14,18,27,28,31,34,36,38,39,40,41,42,43,44,45,46,47,48,51,52,53,58,105,107,108,109,114,],[21,21,50,54,57,21,21,62,21,21,21,21,21,21,21,21,21,21,21,76,77,78,81,21,21,21,21,121,]),'comparison':([8,14,18,27,28,31,34,36,38,39,40,41,42,43,44,45,46,47,48,51,52,53,58,105,107,108,109,114,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'boolean_val':([8,14,18,27,28,31,34,36,38,39,40,41,42,43,44,45,46,47,48,51,52,53,58,105,107,108,109,114,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'boolexp':([8,14,18,27,28,31,34,36,38,39,40,41,42,43,44,45,46,47,48,51,52,53,58,105,107,108,109,114,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'step':([87,],[90,]),'elifs':([92,100,],[99,113,]),'elif':([92,100,],[100,100,]),'empty':([92,99,100,],[102,112,102,]),'else':([99,],[110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> stmts','prog',1,'p_prog','compiler.py',108),
  ('stmts -> statement stmts','stmts',2,'p_statements_recursion','compiler.py',117),
  ('stmts -> statement','stmts',1,'p_statements_recursion','compiler.py',118),
  ('statement -> INTDCL NAME ;','statement',3,'p_statement_declare_int','compiler.py',127),
  ('statement -> INTDCL NAME = expression ;','statement',5,'p_statement_declare_int','compiler.py',128),
  ('statement -> FLOATDCL NAME ;','statement',3,'p_statement_declare_float','compiler.py',140),
  ('statement -> FLOATDCL NAME = expression ;','statement',5,'p_statement_declare_float','compiler.py',141),
  ('statement -> BOOLDCL NAME ;','statement',3,'p_statement_declare_bool','compiler.py',153),
  ('statement -> BOOLDCL NAME = boolean_expression ;','statement',5,'p_statement_declare_bool','compiler.py',154),
  ('statement -> PRINT expression ;','statement',3,'p_statement_print','compiler.py',167),
  ('statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else','statement',9,'p_statement_if','compiler.py',176),
  ('elifs -> elif elifs','elifs',2,'p_elif_recursion','compiler.py',196),
  ('elifs -> elif','elifs',1,'p_elif_recursion','compiler.py',197),
  ('elif -> ELIF LPAREN boolean_expression RPAREN { stmts }','elif',7,'p_elif','compiler.py',206),
  ('elif -> empty','elif',1,'p_elif','compiler.py',207),
  ('else -> ELSE { stmts }','else',4,'p_else','compiler.py',223),
  ('else -> empty','else',1,'p_else','compiler.py',224),
  ('statement -> WHILE LPAREN boolean_expression RPAREN { stmts }','statement',7,'p_statement_while','compiler.py',237),
  ('statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts }','statement',10,'p_statement_for','compiler.py',252),
  ('step -> NAME PLUS = expression','step',4,'p_expression_step','compiler.py',276),
  ('step -> NAME MINUS = expression','step',4,'p_expression_step','compiler.py',277),
  ('step -> NAME TIMES = expression','step',4,'p_expression_step','compiler.py',278),
  ('step -> NAME DIVIDE = expression','step',4,'p_expression_step','compiler.py',279),
  ('step -> NAME PLUS PLUS','step',3,'p_expression_step','compiler.py',280),
  ('step -> NAME MINUS MINUS','step',3,'p_expression_step','compiler.py',281),
  ('statement -> NAME = expression ;','statement',4,'p_statement_assign','compiler.py',338),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','compiler.py',357),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','compiler.py',363),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','compiler.py',364),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','compiler.py',365),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','compiler.py',366),
  ('expression -> expression POW expression','expression',3,'p_expression_binop','compiler.py',367),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','compiler.py',378),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','compiler.py',387),
  ('expression -> boolean_expression','expression',1,'p_expression_boolean','compiler.py',396),
  ('boolean_expression -> LPAREN boolean_expression RPAREN','boolean_expression',3,'p_boolean_expression_group','compiler.py',402),
  ('boolean_expression -> boolean_expression AND boolean_expression','boolean_expression',3,'p_boolean_expression','compiler.py',408),
  ('boolean_expression -> boolean_expression OR boolean_expression','boolean_expression',3,'p_boolean_expression','compiler.py',409),
  ('boolean_expression -> comparison','boolean_expression',1,'p_boolean_expression','compiler.py',410),
  ('boolean_expression -> boolean_val','boolean_expression',1,'p_boolean_expression','compiler.py',411),
  ('comparison -> expression EQ expression','comparison',3,'p_comparison','compiler.py',428),
  ('comparison -> expression NE expression','comparison',3,'p_comparison','compiler.py',429),
  ('comparison -> expression LT expression','comparison',3,'p_comparison','compiler.py',430),
  ('comparison -> expression LE expression','comparison',3,'p_comparison','compiler.py',431),
  ('comparison -> expression GT expression','comparison',3,'p_comparison','compiler.py',432),
  ('comparison -> expression GE expression','comparison',3,'p_comparison','compiler.py',433),
  ('boolean_val -> boolexp','boolean_val',1,'p_boolean_val','compiler.py',444),
  ('boolean_val -> NAME','boolean_val',1,'p_boolean_val','compiler.py',445),
  ('boolexp -> BOOLVAL','boolexp',1,'p_bool_expression','compiler.py',457),
  ('expression -> NAME','expression',1,'p_expression_name','compiler.py',466),
  ('empty -> <empty>','empty',0,'p_empty','compiler.py',476),
]
