Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> stmts
Rule 2     stmts -> statement stmts
Rule 3     stmts -> statement
Rule 4     statement -> INTDCL NAME ;
Rule 5     statement -> INTDCL NAME = expression ;
Rule 6     statement -> FLOATDCL NAME ;
Rule 7     statement -> FLOATDCL NAME = expression ;
Rule 8     statement -> BOOLDCL NAME ;
Rule 9     statement -> BOOLDCL NAME = boolean_expression ;
Rule 10    statement -> PRINT expression ;
Rule 11    statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else
Rule 12    elifs -> elif elifs
Rule 13    elifs -> elif
Rule 14    elif -> ELIF LPAREN boolean_expression RPAREN { stmts }
Rule 15    elif -> empty
Rule 16    else -> ELSE { stmts }
Rule 17    else -> empty
Rule 18    statement -> WHILE LPAREN boolean_expression RPAREN { stmts }
Rule 19    statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts }
Rule 20    step -> NAME PLUS = expression
Rule 21    step -> NAME MINUS = expression
Rule 22    step -> NAME TIMES = expression
Rule 23    step -> NAME DIVIDE = expression
Rule 24    step -> NAME PLUS PLUS
Rule 25    step -> NAME MINUS MINUS
Rule 26    statement -> NAME = expression ;
Rule 27    expression -> LPAREN expression RPAREN
Rule 28    expression -> MINUS expression
Rule 29    expression -> expression PLUS expression
Rule 30    expression -> expression MINUS expression
Rule 31    expression -> expression TIMES expression
Rule 32    expression -> expression DIVIDE expression
Rule 33    expression -> expression POW expression
Rule 34    expression -> INUMBER
Rule 35    expression -> FNUMBER
Rule 36    expression -> boolean_expression
Rule 37    boolean_expression -> LPAREN boolean_expression RPAREN
Rule 38    boolean_expression -> boolean_expression AND boolean_expression
Rule 39    boolean_expression -> boolean_expression OR boolean_expression
Rule 40    boolean_expression -> comparison
Rule 41    boolean_expression -> boolean_val
Rule 42    comparison -> expression EQ expression
Rule 43    comparison -> expression NE expression
Rule 44    comparison -> expression LT expression
Rule 45    comparison -> expression LE expression
Rule 46    comparison -> expression GT expression
Rule 47    comparison -> expression GE expression
Rule 48    boolean_val -> boolexp
Rule 49    boolean_val -> NAME
Rule 50    boolexp -> BOOLVAL
Rule 51    expression -> NAME
Rule 52    empty -> <empty>

Terminals, with rules where they appear

;                    : 4 5 6 7 8 9 10 19 26
=                    : 5 7 9 20 21 22 23 26
AND                  : 38
BOOLDCL              : 8 9
BOOLVAL              : 50
DIVIDE               : 23 32
ELIF                 : 14
ELSE                 : 16
EQ                   : 42
FLOATDCL             : 6 7
FNUMBER              : 35
FOR                  : 19
GE                   : 47
GT                   : 46
IF                   : 11
INTDCL               : 4 5
INUMBER              : 34
LE                   : 45
LPAREN               : 11 14 18 19 27 37
LT                   : 44
MINUS                : 21 25 25 28 30
NAME                 : 4 5 6 7 8 9 20 21 22 23 24 25 26 49 51
NE                   : 43
OR                   : 39
PLUS                 : 20 24 24 29
POW                  : 33
PRINT                : 10
RPAREN               : 11 14 18 19 27 37
TIMES                : 22 31
WHILE                : 18
error                : 
{                    : 11 14 16 18 19
}                    : 11 14 16 18 19

Nonterminals, with rules where they appear

boolean_expression   : 9 11 14 18 19 36 37 38 38 39 39
boolean_val          : 41
boolexp              : 48
comparison           : 40
elif                 : 12 13
elifs                : 11 12
else                 : 11
empty                : 15 17
expression           : 5 7 10 20 21 22 23 26 27 28 29 29 30 30 31 31 32 32 33 33 42 42 43 43 44 44 45 45 46 46 47 47
prog                 : 0
statement            : 2 3 19
step                 : 19
stmts                : 1 2 11 14 16 18 19

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . stmts
    (2) stmts -> . statement stmts
    (3) stmts -> . statement
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = expression ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = expression ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolean_expression ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF LPAREN boolean_expression RPAREN { stmts } elifs else
    (18) statement -> . WHILE LPAREN boolean_expression RPAREN { stmts }
    (19) statement -> . FOR LPAREN statement boolean_expression ; step RPAREN { stmts }
    (26) statement -> . NAME = expression ;

    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    NAME            shift and go to state 5

    prog                           shift and go to state 1
    stmts                          shift and go to state 2
    statement                      shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> stmts .

    $end            reduce using rule 1 (prog -> stmts .)


state 3

    (2) stmts -> statement . stmts
    (3) stmts -> statement .
    (2) stmts -> . statement stmts
    (3) stmts -> . statement
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = expression ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = expression ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolean_expression ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF LPAREN boolean_expression RPAREN { stmts } elifs else
    (18) statement -> . WHILE LPAREN boolean_expression RPAREN { stmts }
    (19) statement -> . FOR LPAREN statement boolean_expression ; step RPAREN { stmts }
    (26) statement -> . NAME = expression ;

    $end            reduce using rule 3 (stmts -> statement .)
    }               reduce using rule 3 (stmts -> statement .)
    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    NAME            shift and go to state 5

    statement                      shift and go to state 3
    stmts                          shift and go to state 12

state 4

    (4) statement -> INTDCL . NAME ;
    (5) statement -> INTDCL . NAME = expression ;

    NAME            shift and go to state 13


state 5

    (26) statement -> NAME . = expression ;

    =               shift and go to state 14


state 6

    (6) statement -> FLOATDCL . NAME ;
    (7) statement -> FLOATDCL . NAME = expression ;

    NAME            shift and go to state 15


state 7

    (8) statement -> BOOLDCL . NAME ;
    (9) statement -> BOOLDCL . NAME = boolean_expression ;

    NAME            shift and go to state 16


state 8

    (10) statement -> PRINT . expression ;
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 17
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 9

    (11) statement -> IF . LPAREN boolean_expression RPAREN { stmts } elifs else

    LPAREN          shift and go to state 28


state 10

    (18) statement -> WHILE . LPAREN boolean_expression RPAREN { stmts }

    LPAREN          shift and go to state 29


state 11

    (19) statement -> FOR . LPAREN statement boolean_expression ; step RPAREN { stmts }

    LPAREN          shift and go to state 30


state 12

    (2) stmts -> statement stmts .

    $end            reduce using rule 2 (stmts -> statement stmts .)
    }               reduce using rule 2 (stmts -> statement stmts .)


state 13

    (4) statement -> INTDCL NAME . ;
    (5) statement -> INTDCL NAME . = expression ;

    ;               shift and go to state 31
    =               shift and go to state 32


state 14

    (26) statement -> NAME = . expression ;
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 33
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 15

    (6) statement -> FLOATDCL NAME . ;
    (7) statement -> FLOATDCL NAME . = expression ;

    ;               shift and go to state 34
    =               shift and go to state 35


state 16

    (8) statement -> BOOLDCL NAME . ;
    (9) statement -> BOOLDCL NAME . = boolean_expression ;

    ;               shift and go to state 36
    =               shift and go to state 37


state 17

    (10) statement -> PRINT expression . ;
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    ;               shift and go to state 38
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49


state 18

    (27) expression -> LPAREN . expression RPAREN
    (37) boolean_expression -> LPAREN . boolean_expression RPAREN
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 50
    boolean_expression             shift and go to state 51
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 19

    (28) expression -> MINUS . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 52
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 20

    (34) expression -> INUMBER .

    ;               reduce using rule 34 (expression -> INUMBER .)
    PLUS            reduce using rule 34 (expression -> INUMBER .)
    MINUS           reduce using rule 34 (expression -> INUMBER .)
    TIMES           reduce using rule 34 (expression -> INUMBER .)
    DIVIDE          reduce using rule 34 (expression -> INUMBER .)
    POW             reduce using rule 34 (expression -> INUMBER .)
    EQ              reduce using rule 34 (expression -> INUMBER .)
    NE              reduce using rule 34 (expression -> INUMBER .)
    LT              reduce using rule 34 (expression -> INUMBER .)
    LE              reduce using rule 34 (expression -> INUMBER .)
    GT              reduce using rule 34 (expression -> INUMBER .)
    GE              reduce using rule 34 (expression -> INUMBER .)
    RPAREN          reduce using rule 34 (expression -> INUMBER .)
    AND             reduce using rule 34 (expression -> INUMBER .)
    OR              reduce using rule 34 (expression -> INUMBER .)


state 21

    (35) expression -> FNUMBER .

    ;               reduce using rule 35 (expression -> FNUMBER .)
    PLUS            reduce using rule 35 (expression -> FNUMBER .)
    MINUS           reduce using rule 35 (expression -> FNUMBER .)
    TIMES           reduce using rule 35 (expression -> FNUMBER .)
    DIVIDE          reduce using rule 35 (expression -> FNUMBER .)
    POW             reduce using rule 35 (expression -> FNUMBER .)
    EQ              reduce using rule 35 (expression -> FNUMBER .)
    NE              reduce using rule 35 (expression -> FNUMBER .)
    LT              reduce using rule 35 (expression -> FNUMBER .)
    LE              reduce using rule 35 (expression -> FNUMBER .)
    GT              reduce using rule 35 (expression -> FNUMBER .)
    GE              reduce using rule 35 (expression -> FNUMBER .)
    RPAREN          reduce using rule 35 (expression -> FNUMBER .)
    AND             reduce using rule 35 (expression -> FNUMBER .)
    OR              reduce using rule 35 (expression -> FNUMBER .)


state 22

    (36) expression -> boolean_expression .
    (38) boolean_expression -> boolean_expression . AND boolean_expression
    (39) boolean_expression -> boolean_expression . OR boolean_expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ;               reduce using rule 36 (expression -> boolean_expression .)
    PLUS            reduce using rule 36 (expression -> boolean_expression .)
    MINUS           reduce using rule 36 (expression -> boolean_expression .)
    TIMES           reduce using rule 36 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 36 (expression -> boolean_expression .)
    POW             reduce using rule 36 (expression -> boolean_expression .)
    EQ              reduce using rule 36 (expression -> boolean_expression .)
    NE              reduce using rule 36 (expression -> boolean_expression .)
    LT              reduce using rule 36 (expression -> boolean_expression .)
    LE              reduce using rule 36 (expression -> boolean_expression .)
    GT              reduce using rule 36 (expression -> boolean_expression .)
    GE              reduce using rule 36 (expression -> boolean_expression .)
    RPAREN          reduce using rule 36 (expression -> boolean_expression .)
    AND             shift and go to state 53
    OR              shift and go to state 54

  ! AND             [ reduce using rule 36 (expression -> boolean_expression .) ]
  ! OR              [ reduce using rule 36 (expression -> boolean_expression .) ]


state 23

    (51) expression -> NAME .
    (49) boolean_val -> NAME .

  ! reduce/reduce conflict for AND resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for OR resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for ; resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for PLUS resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for MINUS resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for TIMES resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for POW resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for EQ resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for NE resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for LT resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for LE resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for GT resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for GE resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for RPAREN resolved using rule 49 (boolean_val -> NAME .)
    AND             reduce using rule 49 (boolean_val -> NAME .)
    OR              reduce using rule 49 (boolean_val -> NAME .)
    ;               reduce using rule 49 (boolean_val -> NAME .)
    PLUS            reduce using rule 49 (boolean_val -> NAME .)
    MINUS           reduce using rule 49 (boolean_val -> NAME .)
    TIMES           reduce using rule 49 (boolean_val -> NAME .)
    DIVIDE          reduce using rule 49 (boolean_val -> NAME .)
    POW             reduce using rule 49 (boolean_val -> NAME .)
    EQ              reduce using rule 49 (boolean_val -> NAME .)
    NE              reduce using rule 49 (boolean_val -> NAME .)
    LT              reduce using rule 49 (boolean_val -> NAME .)
    LE              reduce using rule 49 (boolean_val -> NAME .)
    GT              reduce using rule 49 (boolean_val -> NAME .)
    GE              reduce using rule 49 (boolean_val -> NAME .)
    RPAREN          reduce using rule 49 (boolean_val -> NAME .)

  ! ;               [ reduce using rule 51 (expression -> NAME .) ]
  ! PLUS            [ reduce using rule 51 (expression -> NAME .) ]
  ! MINUS           [ reduce using rule 51 (expression -> NAME .) ]
  ! TIMES           [ reduce using rule 51 (expression -> NAME .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> NAME .) ]
  ! POW             [ reduce using rule 51 (expression -> NAME .) ]
  ! EQ              [ reduce using rule 51 (expression -> NAME .) ]
  ! NE              [ reduce using rule 51 (expression -> NAME .) ]
  ! LT              [ reduce using rule 51 (expression -> NAME .) ]
  ! LE              [ reduce using rule 51 (expression -> NAME .) ]
  ! GT              [ reduce using rule 51 (expression -> NAME .) ]
  ! GE              [ reduce using rule 51 (expression -> NAME .) ]
  ! RPAREN          [ reduce using rule 51 (expression -> NAME .) ]
  ! AND             [ reduce using rule 51 (expression -> NAME .) ]
  ! OR              [ reduce using rule 51 (expression -> NAME .) ]


state 24

    (40) boolean_expression -> comparison .

    AND             reduce using rule 40 (boolean_expression -> comparison .)
    OR              reduce using rule 40 (boolean_expression -> comparison .)
    ;               reduce using rule 40 (boolean_expression -> comparison .)
    PLUS            reduce using rule 40 (boolean_expression -> comparison .)
    MINUS           reduce using rule 40 (boolean_expression -> comparison .)
    TIMES           reduce using rule 40 (boolean_expression -> comparison .)
    DIVIDE          reduce using rule 40 (boolean_expression -> comparison .)
    POW             reduce using rule 40 (boolean_expression -> comparison .)
    EQ              reduce using rule 40 (boolean_expression -> comparison .)
    NE              reduce using rule 40 (boolean_expression -> comparison .)
    LT              reduce using rule 40 (boolean_expression -> comparison .)
    LE              reduce using rule 40 (boolean_expression -> comparison .)
    GT              reduce using rule 40 (boolean_expression -> comparison .)
    GE              reduce using rule 40 (boolean_expression -> comparison .)
    RPAREN          reduce using rule 40 (boolean_expression -> comparison .)


state 25

    (41) boolean_expression -> boolean_val .

    AND             reduce using rule 41 (boolean_expression -> boolean_val .)
    OR              reduce using rule 41 (boolean_expression -> boolean_val .)
    ;               reduce using rule 41 (boolean_expression -> boolean_val .)
    PLUS            reduce using rule 41 (boolean_expression -> boolean_val .)
    MINUS           reduce using rule 41 (boolean_expression -> boolean_val .)
    TIMES           reduce using rule 41 (boolean_expression -> boolean_val .)
    DIVIDE          reduce using rule 41 (boolean_expression -> boolean_val .)
    POW             reduce using rule 41 (boolean_expression -> boolean_val .)
    EQ              reduce using rule 41 (boolean_expression -> boolean_val .)
    NE              reduce using rule 41 (boolean_expression -> boolean_val .)
    LT              reduce using rule 41 (boolean_expression -> boolean_val .)
    LE              reduce using rule 41 (boolean_expression -> boolean_val .)
    GT              reduce using rule 41 (boolean_expression -> boolean_val .)
    GE              reduce using rule 41 (boolean_expression -> boolean_val .)
    RPAREN          reduce using rule 41 (boolean_expression -> boolean_val .)


state 26

    (48) boolean_val -> boolexp .

    AND             reduce using rule 48 (boolean_val -> boolexp .)
    OR              reduce using rule 48 (boolean_val -> boolexp .)
    ;               reduce using rule 48 (boolean_val -> boolexp .)
    PLUS            reduce using rule 48 (boolean_val -> boolexp .)
    MINUS           reduce using rule 48 (boolean_val -> boolexp .)
    TIMES           reduce using rule 48 (boolean_val -> boolexp .)
    DIVIDE          reduce using rule 48 (boolean_val -> boolexp .)
    POW             reduce using rule 48 (boolean_val -> boolexp .)
    EQ              reduce using rule 48 (boolean_val -> boolexp .)
    NE              reduce using rule 48 (boolean_val -> boolexp .)
    LT              reduce using rule 48 (boolean_val -> boolexp .)
    LE              reduce using rule 48 (boolean_val -> boolexp .)
    GT              reduce using rule 48 (boolean_val -> boolexp .)
    GE              reduce using rule 48 (boolean_val -> boolexp .)
    RPAREN          reduce using rule 48 (boolean_val -> boolexp .)


state 27

    (50) boolexp -> BOOLVAL .

    AND             reduce using rule 50 (boolexp -> BOOLVAL .)
    OR              reduce using rule 50 (boolexp -> BOOLVAL .)
    ;               reduce using rule 50 (boolexp -> BOOLVAL .)
    PLUS            reduce using rule 50 (boolexp -> BOOLVAL .)
    MINUS           reduce using rule 50 (boolexp -> BOOLVAL .)
    TIMES           reduce using rule 50 (boolexp -> BOOLVAL .)
    DIVIDE          reduce using rule 50 (boolexp -> BOOLVAL .)
    POW             reduce using rule 50 (boolexp -> BOOLVAL .)
    EQ              reduce using rule 50 (boolexp -> BOOLVAL .)
    NE              reduce using rule 50 (boolexp -> BOOLVAL .)
    LT              reduce using rule 50 (boolexp -> BOOLVAL .)
    LE              reduce using rule 50 (boolexp -> BOOLVAL .)
    GT              reduce using rule 50 (boolexp -> BOOLVAL .)
    GE              reduce using rule 50 (boolexp -> BOOLVAL .)
    RPAREN          reduce using rule 50 (boolexp -> BOOLVAL .)


state 28

    (11) statement -> IF LPAREN . boolean_expression RPAREN { stmts } elifs else
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 55
    NAME            shift and go to state 58
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    BOOLVAL         shift and go to state 27

    boolean_expression             shift and go to state 56
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    expression                     shift and go to state 57
    boolexp                        shift and go to state 26

state 29

    (18) statement -> WHILE LPAREN . boolean_expression RPAREN { stmts }
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 55
    NAME            shift and go to state 58
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    BOOLVAL         shift and go to state 27

    boolean_expression             shift and go to state 59
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    expression                     shift and go to state 57
    boolexp                        shift and go to state 26

state 30

    (19) statement -> FOR LPAREN . statement boolean_expression ; step RPAREN { stmts }
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = expression ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = expression ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolean_expression ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF LPAREN boolean_expression RPAREN { stmts } elifs else
    (18) statement -> . WHILE LPAREN boolean_expression RPAREN { stmts }
    (19) statement -> . FOR LPAREN statement boolean_expression ; step RPAREN { stmts }
    (26) statement -> . NAME = expression ;

    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    NAME            shift and go to state 5

    statement                      shift and go to state 60

state 31

    (4) statement -> INTDCL NAME ; .

    INTDCL          reduce using rule 4 (statement -> INTDCL NAME ; .)
    FLOATDCL        reduce using rule 4 (statement -> INTDCL NAME ; .)
    BOOLDCL         reduce using rule 4 (statement -> INTDCL NAME ; .)
    PRINT           reduce using rule 4 (statement -> INTDCL NAME ; .)
    IF              reduce using rule 4 (statement -> INTDCL NAME ; .)
    WHILE           reduce using rule 4 (statement -> INTDCL NAME ; .)
    FOR             reduce using rule 4 (statement -> INTDCL NAME ; .)
    NAME            reduce using rule 4 (statement -> INTDCL NAME ; .)
    $end            reduce using rule 4 (statement -> INTDCL NAME ; .)
    }               reduce using rule 4 (statement -> INTDCL NAME ; .)
    LPAREN          reduce using rule 4 (statement -> INTDCL NAME ; .)
    MINUS           reduce using rule 4 (statement -> INTDCL NAME ; .)
    INUMBER         reduce using rule 4 (statement -> INTDCL NAME ; .)
    FNUMBER         reduce using rule 4 (statement -> INTDCL NAME ; .)
    BOOLVAL         reduce using rule 4 (statement -> INTDCL NAME ; .)


state 32

    (5) statement -> INTDCL NAME = . expression ;
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 61
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 33

    (26) statement -> NAME = expression . ;
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    ;               shift and go to state 62
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49


state 34

    (6) statement -> FLOATDCL NAME ; .

    INTDCL          reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    FLOATDCL        reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    BOOLDCL         reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    PRINT           reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    IF              reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    WHILE           reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    FOR             reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    NAME            reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    $end            reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    }               reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    LPAREN          reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    MINUS           reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    INUMBER         reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    FNUMBER         reduce using rule 6 (statement -> FLOATDCL NAME ; .)
    BOOLVAL         reduce using rule 6 (statement -> FLOATDCL NAME ; .)


state 35

    (7) statement -> FLOATDCL NAME = . expression ;
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 63
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 36

    (8) statement -> BOOLDCL NAME ; .

    INTDCL          reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    FLOATDCL        reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    BOOLDCL         reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    PRINT           reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    IF              reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    WHILE           reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    FOR             reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    NAME            reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    $end            reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    }               reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    LPAREN          reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    MINUS           reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    INUMBER         reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    FNUMBER         reduce using rule 8 (statement -> BOOLDCL NAME ; .)
    BOOLVAL         reduce using rule 8 (statement -> BOOLDCL NAME ; .)


state 37

    (9) statement -> BOOLDCL NAME = . boolean_expression ;
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 55
    NAME            shift and go to state 58
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    BOOLVAL         shift and go to state 27

    boolean_expression             shift and go to state 64
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    expression                     shift and go to state 57
    boolexp                        shift and go to state 26

state 38

    (10) statement -> PRINT expression ; .

    INTDCL          reduce using rule 10 (statement -> PRINT expression ; .)
    FLOATDCL        reduce using rule 10 (statement -> PRINT expression ; .)
    BOOLDCL         reduce using rule 10 (statement -> PRINT expression ; .)
    PRINT           reduce using rule 10 (statement -> PRINT expression ; .)
    IF              reduce using rule 10 (statement -> PRINT expression ; .)
    WHILE           reduce using rule 10 (statement -> PRINT expression ; .)
    FOR             reduce using rule 10 (statement -> PRINT expression ; .)
    NAME            reduce using rule 10 (statement -> PRINT expression ; .)
    $end            reduce using rule 10 (statement -> PRINT expression ; .)
    }               reduce using rule 10 (statement -> PRINT expression ; .)
    LPAREN          reduce using rule 10 (statement -> PRINT expression ; .)
    MINUS           reduce using rule 10 (statement -> PRINT expression ; .)
    INUMBER         reduce using rule 10 (statement -> PRINT expression ; .)
    FNUMBER         reduce using rule 10 (statement -> PRINT expression ; .)
    BOOLVAL         reduce using rule 10 (statement -> PRINT expression ; .)


state 39

    (29) expression -> expression PLUS . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 65
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 40

    (30) expression -> expression MINUS . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 66
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 41

    (31) expression -> expression TIMES . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 67
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 42

    (32) expression -> expression DIVIDE . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 68
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 43

    (33) expression -> expression POW . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 69
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 44

    (42) comparison -> expression EQ . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 70
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 45

    (43) comparison -> expression NE . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 71
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 46

    (44) comparison -> expression LT . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 72
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 47

    (45) comparison -> expression LE . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 73
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 48

    (46) comparison -> expression GT . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 74
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 49

    (47) comparison -> expression GE . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 75
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 50

    (27) expression -> LPAREN expression . RPAREN
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    RPAREN          shift and go to state 76
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49


state 51

    (37) boolean_expression -> LPAREN boolean_expression . RPAREN
    (36) expression -> boolean_expression .
    (38) boolean_expression -> boolean_expression . AND boolean_expression
    (39) boolean_expression -> boolean_expression . OR boolean_expression

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 77
    PLUS            reduce using rule 36 (expression -> boolean_expression .)
    MINUS           reduce using rule 36 (expression -> boolean_expression .)
    TIMES           reduce using rule 36 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 36 (expression -> boolean_expression .)
    POW             reduce using rule 36 (expression -> boolean_expression .)
    EQ              reduce using rule 36 (expression -> boolean_expression .)
    NE              reduce using rule 36 (expression -> boolean_expression .)
    LT              reduce using rule 36 (expression -> boolean_expression .)
    LE              reduce using rule 36 (expression -> boolean_expression .)
    GT              reduce using rule 36 (expression -> boolean_expression .)
    GE              reduce using rule 36 (expression -> boolean_expression .)
    AND             shift and go to state 53
    OR              shift and go to state 54

  ! RPAREN          [ reduce using rule 36 (expression -> boolean_expression .) ]


state 52

    (28) expression -> MINUS expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    ;               reduce using rule 28 (expression -> MINUS expression .)
    PLUS            reduce using rule 28 (expression -> MINUS expression .)
    MINUS           reduce using rule 28 (expression -> MINUS expression .)
    TIMES           reduce using rule 28 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 28 (expression -> MINUS expression .)
    POW             reduce using rule 28 (expression -> MINUS expression .)
    EQ              reduce using rule 28 (expression -> MINUS expression .)
    NE              reduce using rule 28 (expression -> MINUS expression .)
    LT              reduce using rule 28 (expression -> MINUS expression .)
    LE              reduce using rule 28 (expression -> MINUS expression .)
    GT              reduce using rule 28 (expression -> MINUS expression .)
    GE              reduce using rule 28 (expression -> MINUS expression .)
    RPAREN          reduce using rule 28 (expression -> MINUS expression .)
    AND             reduce using rule 28 (expression -> MINUS expression .)
    OR              reduce using rule 28 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! TIMES           [ shift and go to state 41 ]
  ! DIVIDE          [ shift and go to state 42 ]
  ! POW             [ shift and go to state 43 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]


state 53

    (38) boolean_expression -> boolean_expression AND . boolean_expression
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 55
    NAME            shift and go to state 58
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    BOOLVAL         shift and go to state 27

    boolean_expression             shift and go to state 78
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    expression                     shift and go to state 57
    boolexp                        shift and go to state 26

state 54

    (39) boolean_expression -> boolean_expression OR . boolean_expression
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 55
    NAME            shift and go to state 58
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    BOOLVAL         shift and go to state 27

    boolean_expression             shift and go to state 79
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    expression                     shift and go to state 57
    boolexp                        shift and go to state 26

state 55

    (37) boolean_expression -> LPAREN . boolean_expression RPAREN
    (27) expression -> LPAREN . expression RPAREN
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 55
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    boolean_expression             shift and go to state 80
    expression                     shift and go to state 50
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 56

    (11) statement -> IF LPAREN boolean_expression . RPAREN { stmts } elifs else
    (38) boolean_expression -> boolean_expression . AND boolean_expression
    (39) boolean_expression -> boolean_expression . OR boolean_expression
    (36) expression -> boolean_expression .

    RPAREN          shift and go to state 81
    AND             shift and go to state 53
    OR              shift and go to state 54
    EQ              reduce using rule 36 (expression -> boolean_expression .)
    NE              reduce using rule 36 (expression -> boolean_expression .)
    LT              reduce using rule 36 (expression -> boolean_expression .)
    LE              reduce using rule 36 (expression -> boolean_expression .)
    GT              reduce using rule 36 (expression -> boolean_expression .)
    GE              reduce using rule 36 (expression -> boolean_expression .)
    PLUS            reduce using rule 36 (expression -> boolean_expression .)
    MINUS           reduce using rule 36 (expression -> boolean_expression .)
    TIMES           reduce using rule 36 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 36 (expression -> boolean_expression .)
    POW             reduce using rule 36 (expression -> boolean_expression .)


state 57

    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression

    EQ              shift and go to state 44
    NE              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43


state 58

    (49) boolean_val -> NAME .
    (51) expression -> NAME .

  ! reduce/reduce conflict for EQ resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for NE resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for LT resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for LE resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for GT resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for GE resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for PLUS resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for MINUS resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for TIMES resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 49 (boolean_val -> NAME .)
  ! reduce/reduce conflict for POW resolved using rule 49 (boolean_val -> NAME .)
    RPAREN          reduce using rule 49 (boolean_val -> NAME .)
    AND             reduce using rule 49 (boolean_val -> NAME .)
    OR              reduce using rule 49 (boolean_val -> NAME .)
    EQ              reduce using rule 49 (boolean_val -> NAME .)
    NE              reduce using rule 49 (boolean_val -> NAME .)
    LT              reduce using rule 49 (boolean_val -> NAME .)
    LE              reduce using rule 49 (boolean_val -> NAME .)
    GT              reduce using rule 49 (boolean_val -> NAME .)
    GE              reduce using rule 49 (boolean_val -> NAME .)
    PLUS            reduce using rule 49 (boolean_val -> NAME .)
    MINUS           reduce using rule 49 (boolean_val -> NAME .)
    TIMES           reduce using rule 49 (boolean_val -> NAME .)
    DIVIDE          reduce using rule 49 (boolean_val -> NAME .)
    POW             reduce using rule 49 (boolean_val -> NAME .)
    ;               reduce using rule 49 (boolean_val -> NAME .)

  ! EQ              [ reduce using rule 51 (expression -> NAME .) ]
  ! NE              [ reduce using rule 51 (expression -> NAME .) ]
  ! LT              [ reduce using rule 51 (expression -> NAME .) ]
  ! LE              [ reduce using rule 51 (expression -> NAME .) ]
  ! GT              [ reduce using rule 51 (expression -> NAME .) ]
  ! GE              [ reduce using rule 51 (expression -> NAME .) ]
  ! PLUS            [ reduce using rule 51 (expression -> NAME .) ]
  ! MINUS           [ reduce using rule 51 (expression -> NAME .) ]
  ! TIMES           [ reduce using rule 51 (expression -> NAME .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> NAME .) ]
  ! POW             [ reduce using rule 51 (expression -> NAME .) ]


state 59

    (18) statement -> WHILE LPAREN boolean_expression . RPAREN { stmts }
    (38) boolean_expression -> boolean_expression . AND boolean_expression
    (39) boolean_expression -> boolean_expression . OR boolean_expression
    (36) expression -> boolean_expression .

    RPAREN          shift and go to state 82
    AND             shift and go to state 53
    OR              shift and go to state 54
    EQ              reduce using rule 36 (expression -> boolean_expression .)
    NE              reduce using rule 36 (expression -> boolean_expression .)
    LT              reduce using rule 36 (expression -> boolean_expression .)
    LE              reduce using rule 36 (expression -> boolean_expression .)
    GT              reduce using rule 36 (expression -> boolean_expression .)
    GE              reduce using rule 36 (expression -> boolean_expression .)
    PLUS            reduce using rule 36 (expression -> boolean_expression .)
    MINUS           reduce using rule 36 (expression -> boolean_expression .)
    TIMES           reduce using rule 36 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 36 (expression -> boolean_expression .)
    POW             reduce using rule 36 (expression -> boolean_expression .)


state 60

    (19) statement -> FOR LPAREN statement . boolean_expression ; step RPAREN { stmts }
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 55
    NAME            shift and go to state 58
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    BOOLVAL         shift and go to state 27

    boolean_expression             shift and go to state 83
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    expression                     shift and go to state 57
    boolexp                        shift and go to state 26

state 61

    (5) statement -> INTDCL NAME = expression . ;
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    ;               shift and go to state 84
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49


state 62

    (26) statement -> NAME = expression ; .

    INTDCL          reduce using rule 26 (statement -> NAME = expression ; .)
    FLOATDCL        reduce using rule 26 (statement -> NAME = expression ; .)
    BOOLDCL         reduce using rule 26 (statement -> NAME = expression ; .)
    PRINT           reduce using rule 26 (statement -> NAME = expression ; .)
    IF              reduce using rule 26 (statement -> NAME = expression ; .)
    WHILE           reduce using rule 26 (statement -> NAME = expression ; .)
    FOR             reduce using rule 26 (statement -> NAME = expression ; .)
    NAME            reduce using rule 26 (statement -> NAME = expression ; .)
    $end            reduce using rule 26 (statement -> NAME = expression ; .)
    }               reduce using rule 26 (statement -> NAME = expression ; .)
    LPAREN          reduce using rule 26 (statement -> NAME = expression ; .)
    MINUS           reduce using rule 26 (statement -> NAME = expression ; .)
    INUMBER         reduce using rule 26 (statement -> NAME = expression ; .)
    FNUMBER         reduce using rule 26 (statement -> NAME = expression ; .)
    BOOLVAL         reduce using rule 26 (statement -> NAME = expression ; .)


state 63

    (7) statement -> FLOATDCL NAME = expression . ;
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    ;               shift and go to state 85
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49


state 64

    (9) statement -> BOOLDCL NAME = boolean_expression . ;
    (38) boolean_expression -> boolean_expression . AND boolean_expression
    (39) boolean_expression -> boolean_expression . OR boolean_expression
    (36) expression -> boolean_expression .

    ;               shift and go to state 86
    AND             shift and go to state 53
    OR              shift and go to state 54
    EQ              reduce using rule 36 (expression -> boolean_expression .)
    NE              reduce using rule 36 (expression -> boolean_expression .)
    LT              reduce using rule 36 (expression -> boolean_expression .)
    LE              reduce using rule 36 (expression -> boolean_expression .)
    GT              reduce using rule 36 (expression -> boolean_expression .)
    GE              reduce using rule 36 (expression -> boolean_expression .)
    PLUS            reduce using rule 36 (expression -> boolean_expression .)
    MINUS           reduce using rule 36 (expression -> boolean_expression .)
    TIMES           reduce using rule 36 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 36 (expression -> boolean_expression .)
    POW             reduce using rule 36 (expression -> boolean_expression .)


state 65

    (29) expression -> expression PLUS expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    ;               reduce using rule 29 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 29 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 29 (expression -> expression PLUS expression .)
    EQ              reduce using rule 29 (expression -> expression PLUS expression .)
    NE              reduce using rule 29 (expression -> expression PLUS expression .)
    LT              reduce using rule 29 (expression -> expression PLUS expression .)
    LE              reduce using rule 29 (expression -> expression PLUS expression .)
    GT              reduce using rule 29 (expression -> expression PLUS expression .)
    GE              reduce using rule 29 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 29 (expression -> expression PLUS expression .)
    AND             reduce using rule 29 (expression -> expression PLUS expression .)
    OR              reduce using rule 29 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43

  ! TIMES           [ reduce using rule 29 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 29 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 29 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]


state 66

    (30) expression -> expression MINUS expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    ;               reduce using rule 30 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 30 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 30 (expression -> expression MINUS expression .)
    EQ              reduce using rule 30 (expression -> expression MINUS expression .)
    NE              reduce using rule 30 (expression -> expression MINUS expression .)
    LT              reduce using rule 30 (expression -> expression MINUS expression .)
    LE              reduce using rule 30 (expression -> expression MINUS expression .)
    GT              reduce using rule 30 (expression -> expression MINUS expression .)
    GE              reduce using rule 30 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 30 (expression -> expression MINUS expression .)
    AND             reduce using rule 30 (expression -> expression MINUS expression .)
    OR              reduce using rule 30 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43

  ! TIMES           [ reduce using rule 30 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 30 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 30 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]


state 67

    (31) expression -> expression TIMES expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    ;               reduce using rule 31 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 31 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 31 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 31 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 31 (expression -> expression TIMES expression .)
    EQ              reduce using rule 31 (expression -> expression TIMES expression .)
    NE              reduce using rule 31 (expression -> expression TIMES expression .)
    LT              reduce using rule 31 (expression -> expression TIMES expression .)
    LE              reduce using rule 31 (expression -> expression TIMES expression .)
    GT              reduce using rule 31 (expression -> expression TIMES expression .)
    GE              reduce using rule 31 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 31 (expression -> expression TIMES expression .)
    AND             reduce using rule 31 (expression -> expression TIMES expression .)
    OR              reduce using rule 31 (expression -> expression TIMES expression .)
    POW             shift and go to state 43

  ! POW             [ reduce using rule 31 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! TIMES           [ shift and go to state 41 ]
  ! DIVIDE          [ shift and go to state 42 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]


state 68

    (32) expression -> expression DIVIDE expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    ;               reduce using rule 32 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 32 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 32 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 32 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 32 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 32 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 32 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 32 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 32 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 32 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 32 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 32 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 32 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 32 (expression -> expression DIVIDE expression .)
    POW             shift and go to state 43

  ! POW             [ reduce using rule 32 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! TIMES           [ shift and go to state 41 ]
  ! DIVIDE          [ shift and go to state 42 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]


state 69

    (33) expression -> expression POW expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    ;               reduce using rule 33 (expression -> expression POW expression .)
    PLUS            reduce using rule 33 (expression -> expression POW expression .)
    MINUS           reduce using rule 33 (expression -> expression POW expression .)
    TIMES           reduce using rule 33 (expression -> expression POW expression .)
    DIVIDE          reduce using rule 33 (expression -> expression POW expression .)
    POW             reduce using rule 33 (expression -> expression POW expression .)
    EQ              reduce using rule 33 (expression -> expression POW expression .)
    NE              reduce using rule 33 (expression -> expression POW expression .)
    LT              reduce using rule 33 (expression -> expression POW expression .)
    LE              reduce using rule 33 (expression -> expression POW expression .)
    GT              reduce using rule 33 (expression -> expression POW expression .)
    GE              reduce using rule 33 (expression -> expression POW expression .)
    RPAREN          reduce using rule 33 (expression -> expression POW expression .)
    AND             reduce using rule 33 (expression -> expression POW expression .)
    OR              reduce using rule 33 (expression -> expression POW expression .)

  ! PLUS            [ shift and go to state 39 ]
  ! MINUS           [ shift and go to state 40 ]
  ! TIMES           [ shift and go to state 41 ]
  ! DIVIDE          [ shift and go to state 42 ]
  ! POW             [ shift and go to state 43 ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]


state 70

    (42) comparison -> expression EQ expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    AND             reduce using rule 42 (comparison -> expression EQ expression .)
    OR              reduce using rule 42 (comparison -> expression EQ expression .)
    ;               reduce using rule 42 (comparison -> expression EQ expression .)
    EQ              reduce using rule 42 (comparison -> expression EQ expression .)
    NE              reduce using rule 42 (comparison -> expression EQ expression .)
    RPAREN          reduce using rule 42 (comparison -> expression EQ expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49

  ! PLUS            [ reduce using rule 42 (comparison -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 42 (comparison -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 42 (comparison -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 42 (comparison -> expression EQ expression .) ]
  ! POW             [ reduce using rule 42 (comparison -> expression EQ expression .) ]
  ! LT              [ reduce using rule 42 (comparison -> expression EQ expression .) ]
  ! LE              [ reduce using rule 42 (comparison -> expression EQ expression .) ]
  ! GT              [ reduce using rule 42 (comparison -> expression EQ expression .) ]
  ! GE              [ reduce using rule 42 (comparison -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]


state 71

    (43) comparison -> expression NE expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    AND             reduce using rule 43 (comparison -> expression NE expression .)
    OR              reduce using rule 43 (comparison -> expression NE expression .)
    ;               reduce using rule 43 (comparison -> expression NE expression .)
    EQ              reduce using rule 43 (comparison -> expression NE expression .)
    NE              reduce using rule 43 (comparison -> expression NE expression .)
    RPAREN          reduce using rule 43 (comparison -> expression NE expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49

  ! PLUS            [ reduce using rule 43 (comparison -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 43 (comparison -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 43 (comparison -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 43 (comparison -> expression NE expression .) ]
  ! POW             [ reduce using rule 43 (comparison -> expression NE expression .) ]
  ! LT              [ reduce using rule 43 (comparison -> expression NE expression .) ]
  ! LE              [ reduce using rule 43 (comparison -> expression NE expression .) ]
  ! GT              [ reduce using rule 43 (comparison -> expression NE expression .) ]
  ! GE              [ reduce using rule 43 (comparison -> expression NE expression .) ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]


state 72

    (44) comparison -> expression LT expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    AND             reduce using rule 44 (comparison -> expression LT expression .)
    OR              reduce using rule 44 (comparison -> expression LT expression .)
    ;               reduce using rule 44 (comparison -> expression LT expression .)
    EQ              reduce using rule 44 (comparison -> expression LT expression .)
    NE              reduce using rule 44 (comparison -> expression LT expression .)
    LT              reduce using rule 44 (comparison -> expression LT expression .)
    LE              reduce using rule 44 (comparison -> expression LT expression .)
    GT              reduce using rule 44 (comparison -> expression LT expression .)
    GE              reduce using rule 44 (comparison -> expression LT expression .)
    RPAREN          reduce using rule 44 (comparison -> expression LT expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 44 (comparison -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 44 (comparison -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 44 (comparison -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 44 (comparison -> expression LT expression .) ]
  ! POW             [ reduce using rule 44 (comparison -> expression LT expression .) ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]


state 73

    (45) comparison -> expression LE expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    AND             reduce using rule 45 (comparison -> expression LE expression .)
    OR              reduce using rule 45 (comparison -> expression LE expression .)
    ;               reduce using rule 45 (comparison -> expression LE expression .)
    EQ              reduce using rule 45 (comparison -> expression LE expression .)
    NE              reduce using rule 45 (comparison -> expression LE expression .)
    LT              reduce using rule 45 (comparison -> expression LE expression .)
    LE              reduce using rule 45 (comparison -> expression LE expression .)
    GT              reduce using rule 45 (comparison -> expression LE expression .)
    GE              reduce using rule 45 (comparison -> expression LE expression .)
    RPAREN          reduce using rule 45 (comparison -> expression LE expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 45 (comparison -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 45 (comparison -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 45 (comparison -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 45 (comparison -> expression LE expression .) ]
  ! POW             [ reduce using rule 45 (comparison -> expression LE expression .) ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]


state 74

    (46) comparison -> expression GT expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    AND             reduce using rule 46 (comparison -> expression GT expression .)
    OR              reduce using rule 46 (comparison -> expression GT expression .)
    ;               reduce using rule 46 (comparison -> expression GT expression .)
    EQ              reduce using rule 46 (comparison -> expression GT expression .)
    NE              reduce using rule 46 (comparison -> expression GT expression .)
    LT              reduce using rule 46 (comparison -> expression GT expression .)
    LE              reduce using rule 46 (comparison -> expression GT expression .)
    GT              reduce using rule 46 (comparison -> expression GT expression .)
    GE              reduce using rule 46 (comparison -> expression GT expression .)
    RPAREN          reduce using rule 46 (comparison -> expression GT expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 46 (comparison -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 46 (comparison -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 46 (comparison -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 46 (comparison -> expression GT expression .) ]
  ! POW             [ reduce using rule 46 (comparison -> expression GT expression .) ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]


state 75

    (47) comparison -> expression GE expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    AND             reduce using rule 47 (comparison -> expression GE expression .)
    OR              reduce using rule 47 (comparison -> expression GE expression .)
    ;               reduce using rule 47 (comparison -> expression GE expression .)
    EQ              reduce using rule 47 (comparison -> expression GE expression .)
    NE              reduce using rule 47 (comparison -> expression GE expression .)
    LT              reduce using rule 47 (comparison -> expression GE expression .)
    LE              reduce using rule 47 (comparison -> expression GE expression .)
    GT              reduce using rule 47 (comparison -> expression GE expression .)
    GE              reduce using rule 47 (comparison -> expression GE expression .)
    RPAREN          reduce using rule 47 (comparison -> expression GE expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 47 (comparison -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 47 (comparison -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 47 (comparison -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 47 (comparison -> expression GE expression .) ]
  ! POW             [ reduce using rule 47 (comparison -> expression GE expression .) ]
  ! EQ              [ shift and go to state 44 ]
  ! NE              [ shift and go to state 45 ]
  ! LT              [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GT              [ shift and go to state 48 ]
  ! GE              [ shift and go to state 49 ]


state 76

    (27) expression -> LPAREN expression RPAREN .

    ;               reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 27 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 27 (expression -> LPAREN expression RPAREN .)


state 77

    (37) boolean_expression -> LPAREN boolean_expression RPAREN .

    AND             reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    OR              reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    ;               reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    PLUS            reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    MINUS           reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    TIMES           reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    DIVIDE          reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    POW             reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    EQ              reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    NE              reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    LT              reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    LE              reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    GT              reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    GE              reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)
    RPAREN          reduce using rule 37 (boolean_expression -> LPAREN boolean_expression RPAREN .)


state 78

    (38) boolean_expression -> boolean_expression AND boolean_expression .
    (38) boolean_expression -> boolean_expression . AND boolean_expression
    (39) boolean_expression -> boolean_expression . OR boolean_expression
    (36) expression -> boolean_expression .

  ! reduce/reduce conflict for EQ resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for NE resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LT resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LE resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GT resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GE resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for POW resolved using rule 36 (expression -> boolean_expression .)
    AND             reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .)
    OR              reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .)
    ;               reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .)
    RPAREN          reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .)
    EQ              reduce using rule 36 (expression -> boolean_expression .)
    NE              reduce using rule 36 (expression -> boolean_expression .)
    LT              reduce using rule 36 (expression -> boolean_expression .)
    LE              reduce using rule 36 (expression -> boolean_expression .)
    GT              reduce using rule 36 (expression -> boolean_expression .)
    GE              reduce using rule 36 (expression -> boolean_expression .)
    PLUS            reduce using rule 36 (expression -> boolean_expression .)
    MINUS           reduce using rule 36 (expression -> boolean_expression .)
    TIMES           reduce using rule 36 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 36 (expression -> boolean_expression .)
    POW             reduce using rule 36 (expression -> boolean_expression .)

  ! PLUS            [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! MINUS           [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! TIMES           [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! DIVIDE          [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! POW             [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! EQ              [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! NE              [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! LT              [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! LE              [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! GT              [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! GE              [ reduce using rule 38 (boolean_expression -> boolean_expression AND boolean_expression .) ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 54 ]


state 79

    (39) boolean_expression -> boolean_expression OR boolean_expression .
    (38) boolean_expression -> boolean_expression . AND boolean_expression
    (39) boolean_expression -> boolean_expression . OR boolean_expression
    (36) expression -> boolean_expression .

  ! reduce/reduce conflict for EQ resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for NE resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LT resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for LE resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GT resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for GE resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for PLUS resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for TIMES resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 36 (expression -> boolean_expression .)
  ! reduce/reduce conflict for POW resolved using rule 36 (expression -> boolean_expression .)
    AND             reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .)
    OR              reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .)
    ;               reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .)
    RPAREN          reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .)
    EQ              reduce using rule 36 (expression -> boolean_expression .)
    NE              reduce using rule 36 (expression -> boolean_expression .)
    LT              reduce using rule 36 (expression -> boolean_expression .)
    LE              reduce using rule 36 (expression -> boolean_expression .)
    GT              reduce using rule 36 (expression -> boolean_expression .)
    GE              reduce using rule 36 (expression -> boolean_expression .)
    PLUS            reduce using rule 36 (expression -> boolean_expression .)
    MINUS           reduce using rule 36 (expression -> boolean_expression .)
    TIMES           reduce using rule 36 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 36 (expression -> boolean_expression .)
    POW             reduce using rule 36 (expression -> boolean_expression .)

  ! PLUS            [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! MINUS           [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! TIMES           [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! DIVIDE          [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! POW             [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! EQ              [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! NE              [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! LT              [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! LE              [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! GT              [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! GE              [ reduce using rule 39 (boolean_expression -> boolean_expression OR boolean_expression .) ]
  ! AND             [ shift and go to state 53 ]
  ! OR              [ shift and go to state 54 ]


state 80

    (37) boolean_expression -> LPAREN boolean_expression . RPAREN
    (38) boolean_expression -> boolean_expression . AND boolean_expression
    (39) boolean_expression -> boolean_expression . OR boolean_expression
    (36) expression -> boolean_expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 77
    AND             shift and go to state 53
    OR              shift and go to state 54
    PLUS            reduce using rule 36 (expression -> boolean_expression .)
    MINUS           reduce using rule 36 (expression -> boolean_expression .)
    TIMES           reduce using rule 36 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 36 (expression -> boolean_expression .)
    POW             reduce using rule 36 (expression -> boolean_expression .)
    EQ              reduce using rule 36 (expression -> boolean_expression .)
    NE              reduce using rule 36 (expression -> boolean_expression .)
    LT              reduce using rule 36 (expression -> boolean_expression .)
    LE              reduce using rule 36 (expression -> boolean_expression .)
    GT              reduce using rule 36 (expression -> boolean_expression .)
    GE              reduce using rule 36 (expression -> boolean_expression .)

  ! RPAREN          [ reduce using rule 36 (expression -> boolean_expression .) ]


state 81

    (11) statement -> IF LPAREN boolean_expression RPAREN . { stmts } elifs else

    {               shift and go to state 87


state 82

    (18) statement -> WHILE LPAREN boolean_expression RPAREN . { stmts }

    {               shift and go to state 88


state 83

    (19) statement -> FOR LPAREN statement boolean_expression . ; step RPAREN { stmts }
    (38) boolean_expression -> boolean_expression . AND boolean_expression
    (39) boolean_expression -> boolean_expression . OR boolean_expression
    (36) expression -> boolean_expression .

    ;               shift and go to state 89
    AND             shift and go to state 53
    OR              shift and go to state 54
    EQ              reduce using rule 36 (expression -> boolean_expression .)
    NE              reduce using rule 36 (expression -> boolean_expression .)
    LT              reduce using rule 36 (expression -> boolean_expression .)
    LE              reduce using rule 36 (expression -> boolean_expression .)
    GT              reduce using rule 36 (expression -> boolean_expression .)
    GE              reduce using rule 36 (expression -> boolean_expression .)
    PLUS            reduce using rule 36 (expression -> boolean_expression .)
    MINUS           reduce using rule 36 (expression -> boolean_expression .)
    TIMES           reduce using rule 36 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 36 (expression -> boolean_expression .)
    POW             reduce using rule 36 (expression -> boolean_expression .)


state 84

    (5) statement -> INTDCL NAME = expression ; .

    INTDCL          reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    FLOATDCL        reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    BOOLDCL         reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    PRINT           reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    IF              reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    WHILE           reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    FOR             reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    NAME            reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    $end            reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    }               reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    LPAREN          reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    MINUS           reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    INUMBER         reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    FNUMBER         reduce using rule 5 (statement -> INTDCL NAME = expression ; .)
    BOOLVAL         reduce using rule 5 (statement -> INTDCL NAME = expression ; .)


state 85

    (7) statement -> FLOATDCL NAME = expression ; .

    INTDCL          reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    FLOATDCL        reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    BOOLDCL         reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    PRINT           reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    IF              reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    WHILE           reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    FOR             reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    NAME            reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    $end            reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    }               reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    LPAREN          reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    MINUS           reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    INUMBER         reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    FNUMBER         reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)
    BOOLVAL         reduce using rule 7 (statement -> FLOATDCL NAME = expression ; .)


state 86

    (9) statement -> BOOLDCL NAME = boolean_expression ; .

    INTDCL          reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    FLOATDCL        reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    BOOLDCL         reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    PRINT           reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    IF              reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    WHILE           reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    FOR             reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    NAME            reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    $end            reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    }               reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    LPAREN          reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    MINUS           reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    INUMBER         reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    FNUMBER         reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)
    BOOLVAL         reduce using rule 9 (statement -> BOOLDCL NAME = boolean_expression ; .)


state 87

    (11) statement -> IF LPAREN boolean_expression RPAREN { . stmts } elifs else
    (2) stmts -> . statement stmts
    (3) stmts -> . statement
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = expression ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = expression ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolean_expression ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF LPAREN boolean_expression RPAREN { stmts } elifs else
    (18) statement -> . WHILE LPAREN boolean_expression RPAREN { stmts }
    (19) statement -> . FOR LPAREN statement boolean_expression ; step RPAREN { stmts }
    (26) statement -> . NAME = expression ;

    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    NAME            shift and go to state 5

    stmts                          shift and go to state 90
    statement                      shift and go to state 3

state 88

    (18) statement -> WHILE LPAREN boolean_expression RPAREN { . stmts }
    (2) stmts -> . statement stmts
    (3) stmts -> . statement
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = expression ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = expression ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolean_expression ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF LPAREN boolean_expression RPAREN { stmts } elifs else
    (18) statement -> . WHILE LPAREN boolean_expression RPAREN { stmts }
    (19) statement -> . FOR LPAREN statement boolean_expression ; step RPAREN { stmts }
    (26) statement -> . NAME = expression ;

    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    NAME            shift and go to state 5

    stmts                          shift and go to state 91
    statement                      shift and go to state 3

state 89

    (19) statement -> FOR LPAREN statement boolean_expression ; . step RPAREN { stmts }
    (20) step -> . NAME PLUS = expression
    (21) step -> . NAME MINUS = expression
    (22) step -> . NAME TIMES = expression
    (23) step -> . NAME DIVIDE = expression
    (24) step -> . NAME PLUS PLUS
    (25) step -> . NAME MINUS MINUS

    NAME            shift and go to state 93

    step                           shift and go to state 92

state 90

    (11) statement -> IF LPAREN boolean_expression RPAREN { stmts . } elifs else

    }               shift and go to state 94


state 91

    (18) statement -> WHILE LPAREN boolean_expression RPAREN { stmts . }

    }               shift and go to state 95


state 92

    (19) statement -> FOR LPAREN statement boolean_expression ; step . RPAREN { stmts }

    RPAREN          shift and go to state 96


state 93

    (20) step -> NAME . PLUS = expression
    (21) step -> NAME . MINUS = expression
    (22) step -> NAME . TIMES = expression
    (23) step -> NAME . DIVIDE = expression
    (24) step -> NAME . PLUS PLUS
    (25) step -> NAME . MINUS MINUS

    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100


state 94

    (11) statement -> IF LPAREN boolean_expression RPAREN { stmts } . elifs else
    (12) elifs -> . elif elifs
    (13) elifs -> . elif
    (14) elif -> . ELIF LPAREN boolean_expression RPAREN { stmts }
    (15) elif -> . empty
    (52) empty -> .

  ! shift/reduce conflict for ELIF resolved as shift
    ELIF            shift and go to state 103
    ELSE            reduce using rule 52 (empty -> .)
    INTDCL          reduce using rule 52 (empty -> .)
    FLOATDCL        reduce using rule 52 (empty -> .)
    BOOLDCL         reduce using rule 52 (empty -> .)
    PRINT           reduce using rule 52 (empty -> .)
    IF              reduce using rule 52 (empty -> .)
    WHILE           reduce using rule 52 (empty -> .)
    FOR             reduce using rule 52 (empty -> .)
    NAME            reduce using rule 52 (empty -> .)
    $end            reduce using rule 52 (empty -> .)
    }               reduce using rule 52 (empty -> .)
    LPAREN          reduce using rule 52 (empty -> .)
    MINUS           reduce using rule 52 (empty -> .)
    INUMBER         reduce using rule 52 (empty -> .)
    FNUMBER         reduce using rule 52 (empty -> .)
    BOOLVAL         reduce using rule 52 (empty -> .)

  ! ELIF            [ reduce using rule 52 (empty -> .) ]

    elifs                          shift and go to state 101
    elif                           shift and go to state 102
    empty                          shift and go to state 104

state 95

    (18) statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .

    INTDCL          reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    FLOATDCL        reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    BOOLDCL         reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    PRINT           reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    IF              reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    WHILE           reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    FOR             reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    NAME            reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    $end            reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    }               reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    LPAREN          reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    MINUS           reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    INUMBER         reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    FNUMBER         reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)
    BOOLVAL         reduce using rule 18 (statement -> WHILE LPAREN boolean_expression RPAREN { stmts } .)


state 96

    (19) statement -> FOR LPAREN statement boolean_expression ; step RPAREN . { stmts }

    {               shift and go to state 105


state 97

    (20) step -> NAME PLUS . = expression
    (24) step -> NAME PLUS . PLUS

    =               shift and go to state 107
    PLUS            shift and go to state 106


state 98

    (21) step -> NAME MINUS . = expression
    (25) step -> NAME MINUS . MINUS

    =               shift and go to state 109
    MINUS           shift and go to state 108


state 99

    (22) step -> NAME TIMES . = expression

    =               shift and go to state 110


state 100

    (23) step -> NAME DIVIDE . = expression

    =               shift and go to state 111


state 101

    (11) statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs . else
    (16) else -> . ELSE { stmts }
    (17) else -> . empty
    (52) empty -> .

    ELSE            shift and go to state 113
    INTDCL          reduce using rule 52 (empty -> .)
    FLOATDCL        reduce using rule 52 (empty -> .)
    BOOLDCL         reduce using rule 52 (empty -> .)
    PRINT           reduce using rule 52 (empty -> .)
    IF              reduce using rule 52 (empty -> .)
    WHILE           reduce using rule 52 (empty -> .)
    FOR             reduce using rule 52 (empty -> .)
    NAME            reduce using rule 52 (empty -> .)
    $end            reduce using rule 52 (empty -> .)
    }               reduce using rule 52 (empty -> .)
    LPAREN          reduce using rule 52 (empty -> .)
    MINUS           reduce using rule 52 (empty -> .)
    INUMBER         reduce using rule 52 (empty -> .)
    FNUMBER         reduce using rule 52 (empty -> .)
    BOOLVAL         reduce using rule 52 (empty -> .)

    else                           shift and go to state 112
    empty                          shift and go to state 114

state 102

    (12) elifs -> elif . elifs
    (13) elifs -> elif .
    (12) elifs -> . elif elifs
    (13) elifs -> . elif
    (14) elif -> . ELIF LPAREN boolean_expression RPAREN { stmts }
    (15) elif -> . empty
    (52) empty -> .

  ! shift/reduce conflict for ELIF resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for INTDCL resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for FLOATDCL resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for BOOLDCL resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for PRINT resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for IF resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for WHILE resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for FOR resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for NAME resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for $end resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for } resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for LPAREN resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for MINUS resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for INUMBER resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for FNUMBER resolved using rule 13 (elifs -> elif .)
  ! reduce/reduce conflict for BOOLVAL resolved using rule 13 (elifs -> elif .)
    ELSE            reduce using rule 13 (elifs -> elif .)
    INTDCL          reduce using rule 13 (elifs -> elif .)
    FLOATDCL        reduce using rule 13 (elifs -> elif .)
    BOOLDCL         reduce using rule 13 (elifs -> elif .)
    PRINT           reduce using rule 13 (elifs -> elif .)
    IF              reduce using rule 13 (elifs -> elif .)
    WHILE           reduce using rule 13 (elifs -> elif .)
    FOR             reduce using rule 13 (elifs -> elif .)
    NAME            reduce using rule 13 (elifs -> elif .)
    $end            reduce using rule 13 (elifs -> elif .)
    }               reduce using rule 13 (elifs -> elif .)
    LPAREN          reduce using rule 13 (elifs -> elif .)
    MINUS           reduce using rule 13 (elifs -> elif .)
    INUMBER         reduce using rule 13 (elifs -> elif .)
    FNUMBER         reduce using rule 13 (elifs -> elif .)
    BOOLVAL         reduce using rule 13 (elifs -> elif .)
    ELIF            shift and go to state 103

  ! ELIF            [ reduce using rule 52 (empty -> .) ]
  ! ELSE            [ reduce using rule 52 (empty -> .) ]
  ! INTDCL          [ reduce using rule 52 (empty -> .) ]
  ! FLOATDCL        [ reduce using rule 52 (empty -> .) ]
  ! BOOLDCL         [ reduce using rule 52 (empty -> .) ]
  ! PRINT           [ reduce using rule 52 (empty -> .) ]
  ! IF              [ reduce using rule 52 (empty -> .) ]
  ! WHILE           [ reduce using rule 52 (empty -> .) ]
  ! FOR             [ reduce using rule 52 (empty -> .) ]
  ! NAME            [ reduce using rule 52 (empty -> .) ]
  ! $end            [ reduce using rule 52 (empty -> .) ]
  ! }               [ reduce using rule 52 (empty -> .) ]
  ! LPAREN          [ reduce using rule 52 (empty -> .) ]
  ! MINUS           [ reduce using rule 52 (empty -> .) ]
  ! INUMBER         [ reduce using rule 52 (empty -> .) ]
  ! FNUMBER         [ reduce using rule 52 (empty -> .) ]
  ! BOOLVAL         [ reduce using rule 52 (empty -> .) ]

    elif                           shift and go to state 102
    elifs                          shift and go to state 115
    empty                          shift and go to state 104

state 103

    (14) elif -> ELIF . LPAREN boolean_expression RPAREN { stmts }

    LPAREN          shift and go to state 116


state 104

    (15) elif -> empty .

    ELIF            reduce using rule 15 (elif -> empty .)
    ELSE            reduce using rule 15 (elif -> empty .)
    INTDCL          reduce using rule 15 (elif -> empty .)
    FLOATDCL        reduce using rule 15 (elif -> empty .)
    BOOLDCL         reduce using rule 15 (elif -> empty .)
    PRINT           reduce using rule 15 (elif -> empty .)
    IF              reduce using rule 15 (elif -> empty .)
    WHILE           reduce using rule 15 (elif -> empty .)
    FOR             reduce using rule 15 (elif -> empty .)
    NAME            reduce using rule 15 (elif -> empty .)
    $end            reduce using rule 15 (elif -> empty .)
    }               reduce using rule 15 (elif -> empty .)
    LPAREN          reduce using rule 15 (elif -> empty .)
    MINUS           reduce using rule 15 (elif -> empty .)
    INUMBER         reduce using rule 15 (elif -> empty .)
    FNUMBER         reduce using rule 15 (elif -> empty .)
    BOOLVAL         reduce using rule 15 (elif -> empty .)


state 105

    (19) statement -> FOR LPAREN statement boolean_expression ; step RPAREN { . stmts }
    (2) stmts -> . statement stmts
    (3) stmts -> . statement
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = expression ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = expression ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolean_expression ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF LPAREN boolean_expression RPAREN { stmts } elifs else
    (18) statement -> . WHILE LPAREN boolean_expression RPAREN { stmts }
    (19) statement -> . FOR LPAREN statement boolean_expression ; step RPAREN { stmts }
    (26) statement -> . NAME = expression ;

    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    NAME            shift and go to state 5

    statement                      shift and go to state 3
    stmts                          shift and go to state 117

state 106

    (24) step -> NAME PLUS PLUS .

    RPAREN          reduce using rule 24 (step -> NAME PLUS PLUS .)


state 107

    (20) step -> NAME PLUS = . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 118
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 108

    (25) step -> NAME MINUS MINUS .

    RPAREN          reduce using rule 25 (step -> NAME MINUS MINUS .)


state 109

    (21) step -> NAME MINUS = . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 119
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 110

    (22) step -> NAME TIMES = . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 120
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 111

    (23) step -> NAME DIVIDE = . expression
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 18
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    NAME            shift and go to state 23
    BOOLVAL         shift and go to state 27

    expression                     shift and go to state 121
    boolean_expression             shift and go to state 22
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    boolexp                        shift and go to state 26

state 112

    (11) statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .

    INTDCL          reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    FLOATDCL        reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    BOOLDCL         reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    PRINT           reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    IF              reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    WHILE           reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    FOR             reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    NAME            reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    $end            reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    }               reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    LPAREN          reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    MINUS           reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    INUMBER         reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    FNUMBER         reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)
    BOOLVAL         reduce using rule 11 (statement -> IF LPAREN boolean_expression RPAREN { stmts } elifs else .)


state 113

    (16) else -> ELSE . { stmts }

    {               shift and go to state 122


state 114

    (17) else -> empty .

    INTDCL          reduce using rule 17 (else -> empty .)
    FLOATDCL        reduce using rule 17 (else -> empty .)
    BOOLDCL         reduce using rule 17 (else -> empty .)
    PRINT           reduce using rule 17 (else -> empty .)
    IF              reduce using rule 17 (else -> empty .)
    WHILE           reduce using rule 17 (else -> empty .)
    FOR             reduce using rule 17 (else -> empty .)
    NAME            reduce using rule 17 (else -> empty .)
    $end            reduce using rule 17 (else -> empty .)
    }               reduce using rule 17 (else -> empty .)
    LPAREN          reduce using rule 17 (else -> empty .)
    MINUS           reduce using rule 17 (else -> empty .)
    INUMBER         reduce using rule 17 (else -> empty .)
    FNUMBER         reduce using rule 17 (else -> empty .)
    BOOLVAL         reduce using rule 17 (else -> empty .)


state 115

    (12) elifs -> elif elifs .

    ELSE            reduce using rule 12 (elifs -> elif elifs .)
    INTDCL          reduce using rule 12 (elifs -> elif elifs .)
    FLOATDCL        reduce using rule 12 (elifs -> elif elifs .)
    BOOLDCL         reduce using rule 12 (elifs -> elif elifs .)
    PRINT           reduce using rule 12 (elifs -> elif elifs .)
    IF              reduce using rule 12 (elifs -> elif elifs .)
    WHILE           reduce using rule 12 (elifs -> elif elifs .)
    FOR             reduce using rule 12 (elifs -> elif elifs .)
    NAME            reduce using rule 12 (elifs -> elif elifs .)
    $end            reduce using rule 12 (elifs -> elif elifs .)
    }               reduce using rule 12 (elifs -> elif elifs .)
    LPAREN          reduce using rule 12 (elifs -> elif elifs .)
    MINUS           reduce using rule 12 (elifs -> elif elifs .)
    INUMBER         reduce using rule 12 (elifs -> elif elifs .)
    FNUMBER         reduce using rule 12 (elifs -> elif elifs .)
    BOOLVAL         reduce using rule 12 (elifs -> elif elifs .)


state 116

    (14) elif -> ELIF LPAREN . boolean_expression RPAREN { stmts }
    (37) boolean_expression -> . LPAREN boolean_expression RPAREN
    (38) boolean_expression -> . boolean_expression AND boolean_expression
    (39) boolean_expression -> . boolean_expression OR boolean_expression
    (40) boolean_expression -> . comparison
    (41) boolean_expression -> . boolean_val
    (42) comparison -> . expression EQ expression
    (43) comparison -> . expression NE expression
    (44) comparison -> . expression LT expression
    (45) comparison -> . expression LE expression
    (46) comparison -> . expression GT expression
    (47) comparison -> . expression GE expression
    (48) boolean_val -> . boolexp
    (49) boolean_val -> . NAME
    (27) expression -> . LPAREN expression RPAREN
    (28) expression -> . MINUS expression
    (29) expression -> . expression PLUS expression
    (30) expression -> . expression MINUS expression
    (31) expression -> . expression TIMES expression
    (32) expression -> . expression DIVIDE expression
    (33) expression -> . expression POW expression
    (34) expression -> . INUMBER
    (35) expression -> . FNUMBER
    (36) expression -> . boolean_expression
    (51) expression -> . NAME
    (50) boolexp -> . BOOLVAL

    LPAREN          shift and go to state 55
    NAME            shift and go to state 58
    MINUS           shift and go to state 19
    INUMBER         shift and go to state 20
    FNUMBER         shift and go to state 21
    BOOLVAL         shift and go to state 27

    boolean_expression             shift and go to state 123
    comparison                     shift and go to state 24
    boolean_val                    shift and go to state 25
    expression                     shift and go to state 57
    boolexp                        shift and go to state 26

state 117

    (19) statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts . }

    }               shift and go to state 124


state 118

    (20) step -> NAME PLUS = expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    RPAREN          reduce using rule 20 (step -> NAME PLUS = expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49


state 119

    (21) step -> NAME MINUS = expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    RPAREN          reduce using rule 21 (step -> NAME MINUS = expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49


state 120

    (22) step -> NAME TIMES = expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    RPAREN          reduce using rule 22 (step -> NAME TIMES = expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49


state 121

    (23) step -> NAME DIVIDE = expression .
    (29) expression -> expression . PLUS expression
    (30) expression -> expression . MINUS expression
    (31) expression -> expression . TIMES expression
    (32) expression -> expression . DIVIDE expression
    (33) expression -> expression . POW expression
    (42) comparison -> expression . EQ expression
    (43) comparison -> expression . NE expression
    (44) comparison -> expression . LT expression
    (45) comparison -> expression . LE expression
    (46) comparison -> expression . GT expression
    (47) comparison -> expression . GE expression

    RPAREN          reduce using rule 23 (step -> NAME DIVIDE = expression .)
    PLUS            shift and go to state 39
    MINUS           shift and go to state 40
    TIMES           shift and go to state 41
    DIVIDE          shift and go to state 42
    POW             shift and go to state 43
    EQ              shift and go to state 44
    NE              shift and go to state 45
    LT              shift and go to state 46
    LE              shift and go to state 47
    GT              shift and go to state 48
    GE              shift and go to state 49


state 122

    (16) else -> ELSE { . stmts }
    (2) stmts -> . statement stmts
    (3) stmts -> . statement
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = expression ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = expression ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolean_expression ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF LPAREN boolean_expression RPAREN { stmts } elifs else
    (18) statement -> . WHILE LPAREN boolean_expression RPAREN { stmts }
    (19) statement -> . FOR LPAREN statement boolean_expression ; step RPAREN { stmts }
    (26) statement -> . NAME = expression ;

    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    NAME            shift and go to state 5

    stmts                          shift and go to state 125
    statement                      shift and go to state 3

state 123

    (14) elif -> ELIF LPAREN boolean_expression . RPAREN { stmts }
    (38) boolean_expression -> boolean_expression . AND boolean_expression
    (39) boolean_expression -> boolean_expression . OR boolean_expression
    (36) expression -> boolean_expression .

    RPAREN          shift and go to state 126
    AND             shift and go to state 53
    OR              shift and go to state 54
    EQ              reduce using rule 36 (expression -> boolean_expression .)
    NE              reduce using rule 36 (expression -> boolean_expression .)
    LT              reduce using rule 36 (expression -> boolean_expression .)
    LE              reduce using rule 36 (expression -> boolean_expression .)
    GT              reduce using rule 36 (expression -> boolean_expression .)
    GE              reduce using rule 36 (expression -> boolean_expression .)
    PLUS            reduce using rule 36 (expression -> boolean_expression .)
    MINUS           reduce using rule 36 (expression -> boolean_expression .)
    TIMES           reduce using rule 36 (expression -> boolean_expression .)
    DIVIDE          reduce using rule 36 (expression -> boolean_expression .)
    POW             reduce using rule 36 (expression -> boolean_expression .)


state 124

    (19) statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .

    INTDCL          reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    FLOATDCL        reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    BOOLDCL         reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    PRINT           reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    IF              reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    WHILE           reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    FOR             reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    NAME            reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    $end            reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    }               reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    LPAREN          reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    MINUS           reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    INUMBER         reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    FNUMBER         reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)
    BOOLVAL         reduce using rule 19 (statement -> FOR LPAREN statement boolean_expression ; step RPAREN { stmts } .)


state 125

    (16) else -> ELSE { stmts . }

    }               shift and go to state 127


state 126

    (14) elif -> ELIF LPAREN boolean_expression RPAREN . { stmts }

    {               shift and go to state 128


state 127

    (16) else -> ELSE { stmts } .

    INTDCL          reduce using rule 16 (else -> ELSE { stmts } .)
    FLOATDCL        reduce using rule 16 (else -> ELSE { stmts } .)
    BOOLDCL         reduce using rule 16 (else -> ELSE { stmts } .)
    PRINT           reduce using rule 16 (else -> ELSE { stmts } .)
    IF              reduce using rule 16 (else -> ELSE { stmts } .)
    WHILE           reduce using rule 16 (else -> ELSE { stmts } .)
    FOR             reduce using rule 16 (else -> ELSE { stmts } .)
    NAME            reduce using rule 16 (else -> ELSE { stmts } .)
    $end            reduce using rule 16 (else -> ELSE { stmts } .)
    }               reduce using rule 16 (else -> ELSE { stmts } .)
    LPAREN          reduce using rule 16 (else -> ELSE { stmts } .)
    MINUS           reduce using rule 16 (else -> ELSE { stmts } .)
    INUMBER         reduce using rule 16 (else -> ELSE { stmts } .)
    FNUMBER         reduce using rule 16 (else -> ELSE { stmts } .)
    BOOLVAL         reduce using rule 16 (else -> ELSE { stmts } .)


state 128

    (14) elif -> ELIF LPAREN boolean_expression RPAREN { . stmts }
    (2) stmts -> . statement stmts
    (3) stmts -> . statement
    (4) statement -> . INTDCL NAME ;
    (5) statement -> . INTDCL NAME = expression ;
    (6) statement -> . FLOATDCL NAME ;
    (7) statement -> . FLOATDCL NAME = expression ;
    (8) statement -> . BOOLDCL NAME ;
    (9) statement -> . BOOLDCL NAME = boolean_expression ;
    (10) statement -> . PRINT expression ;
    (11) statement -> . IF LPAREN boolean_expression RPAREN { stmts } elifs else
    (18) statement -> . WHILE LPAREN boolean_expression RPAREN { stmts }
    (19) statement -> . FOR LPAREN statement boolean_expression ; step RPAREN { stmts }
    (26) statement -> . NAME = expression ;

    INTDCL          shift and go to state 4
    FLOATDCL        shift and go to state 6
    BOOLDCL         shift and go to state 7
    PRINT           shift and go to state 8
    IF              shift and go to state 9
    WHILE           shift and go to state 10
    FOR             shift and go to state 11
    NAME            shift and go to state 5

    stmts                          shift and go to state 129
    statement                      shift and go to state 3

state 129

    (14) elif -> ELIF LPAREN boolean_expression RPAREN { stmts . }

    }               shift and go to state 130


state 130

    (14) elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .

    ELIF            reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    ELSE            reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    INTDCL          reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    FLOATDCL        reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    BOOLDCL         reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    PRINT           reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    IF              reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    WHILE           reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    FOR             reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    NAME            reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    $end            reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    }               reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    LPAREN          reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    MINUS           reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    INUMBER         reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    FNUMBER         reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)
    BOOLVAL         reduce using rule 14 (elif -> ELIF LPAREN boolean_expression RPAREN { stmts } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 22 resolved as shift
WARNING: shift/reduce conflict for OR in state 22 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 51 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 80 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 94 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 102 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (boolean_val -> NAME)
WARNING: rejected rule (expression -> NAME) in state 23
WARNING: reduce/reduce conflict in state 58 resolved using rule (boolean_val -> NAME)
WARNING: rejected rule (expression -> NAME) in state 58
WARNING: reduce/reduce conflict in state 78 resolved using rule (expression -> boolean_expression)
WARNING: rejected rule (boolean_expression -> boolean_expression AND boolean_expression) in state 78
WARNING: reduce/reduce conflict in state 79 resolved using rule (expression -> boolean_expression)
WARNING: rejected rule (boolean_expression -> boolean_expression OR boolean_expression) in state 79
WARNING: reduce/reduce conflict in state 102 resolved using rule (elifs -> elif)
WARNING: rejected rule (empty -> <empty>) in state 102
WARNING: Rule (expression -> NAME) is never reduced
